{
	"Default Discord bot index.js file": {
        "prefix": ["djs.index", "djs.main", "djs.bot", "djs.client"],
		"body": [
            "const { Client, Collection, GatewayIntentBits, Partials, Events, ChannelType } = require('discord.js');",
            "const config = require('./configuration.json');",
            "const fs = require('fs');",
            "",
            "const client = new Client({",
            "    shards: 'auto',",
            "    intents: [GatewayIntentBits.Guild, GatewayIntentBits.GuildMembers, GatewayIntentBits.GuildMessages],",
            "    partials: [Partials.Message, Partials.Channel, Partials.Reaction]",
            "});",
            "",
            "client.commands = new Collection();",
            "",
            "const commandFiles = fs.readdirSync('./commands').filter(file => file.endsWith('.js'));",
            "",
            "for (const file of commandFiles) {",
            "    const command = require(`./commands/` + file);",
            "    client.commands.set(command.name, command);",
            "}",
            "",
            "const cooldowns = new Collection();",
            "",
            "client.once(Events.ClientReady, () => {",
            "    console.log('Ready!');",
            "});",
            "",
            "client.on(Events.MessageCreate, message => {",
            "    if (!message.content.startsWith(config.prefix) || message.author.bot) return;",
            "",
            "    const args = message.content.slice(config.prefix.length).split(/ +/);",
            "    const commandName = args.shift().toLowerCase();",
            "",
            "    const command = client.commands.get(commandName) || client.commands.find(cmd => cmd.aliases && cmd.aliases.includes(commandName));",
            "",
            "    if (!command) return;",
            "",
            "    if (command.guildOnly && message.channel.type !== ChannelType.GuildText) {",
            "        return message.reply('I can\\'t execute that command inside DMs!');",
            "    }",
            "",
            "    if (command.args && !args.length) {",
            "        let reply = `You didn't provide any arguments, ${message.author}!`;",
            "",
            "        if (command.usage) {",
            "            reply += `\\nThe proper usage would be: \`${config.prefix}${command.name} ${command.usage}\``;",
            "        }",
            "",
            "        return message.channel.send(reply);",
            "    }",
            "",
            "    if (!cooldowns.has(command.name)) {",
            "        cooldowns.set(command.name, new Collection());",
            "    }",
            "",
            "    const now = Date.now();",
            "    const timestamps = cooldowns.get(command.name);",
            "    const cooldownAmount = (command.cooldown || 3) * 1000;",
            "",
            "    if (timestamps.has(message.author.id)) {",
            "        const expirationTime = timestamps.get(message.author.id) + cooldownAmount;",
            "",
            "        if (now < expirationTime) {",
            "            const timeLeft = (expirationTime - now) / 1000;",
            "            return message.reply(`please wait ${timeLeft.toFixed(1)} more second(s) before reusing the \`${command.name}\` command.`);",
            "        }",
            "    } else {",
            "        timestamps.set(message.author.id, now);",
            "        setTimeout(() => timestamps.delete(message.author.id), cooldownAmount);",
            "",
            "        try {",
            "            command.execute(message, args);",
            "        } catch (error) {",
            "            console.error(error);",
            "            message.reply('there was an error trying to execute that command!');",
            "        }",
            "    }",
            "});",
            "",
            "client.login(config.token);"
        ],
        "description": "Create a basic Discord bot index.js file."
    },

    "Default Discord bot command": {
		"prefix": ["djs.cmd", "djs.command"],
		"body": [       
            "module.exports = {",
            "\tname: \"${1:commandName}\",",
            "\taliases: [\"${2:aliase}\"],",
            "\t${3|execute(message\\, args) {,run: async (client\\, message\\, args) => {|}",
            "\t\t${4:message.reply(\"template command}\")",
            "\t},",
            "};"
		],
        "description": "Create a basic Discord command."
    },

    "Complex Discord bot command": {
		"prefix": ["djs.cmd+", "djs.command+"],
		"body": [       
            "module.exports = {",
            "\tname: \"${1:commandName}\",",
            "\taliases: [\"${2:aliase}\"],",
            "\tdescription: \"${3:description}\",",
            "\tcategory: \"${4:category}\",",
            "\tguildOnly: ${5:true},",
	    "\tmemberpermissions:\"${6:ViewChannel}\",",
	    "\tadminPermOverride: ${7:true},",
            "\tcooldown: ${8:2},",
            "\targs: ${9:args},",
            "\tusage: \"${10:<usage>}\",",
            "\t${11|execute(message\\, args) {,run: async (client\\, message\\, args) => {|}",
            "\t\t${12:message.reply(\"template command}\")",
            "\t},",
            "};"
		],
        "description": "Create a complex Discord command."
    },

    "Default Discord bot embed": {
		"prefix": "djs.embed",
		"body": [       
            "const embed = new Discord.EmbedBuilder()",
            "\t.setColor(0x0099ff)",
            "\t.setTitle('${1:title}')",
            "\t.setDescription('${2:description}')",
            "\t.addFields(",
            "\t\t{ name: '${3:title}', value: '${4:value}', inline: ${5:false} },",
            "\t)",
            "",
            "\tchannel.send(embed);"
		],
        "description": "Create a basic Discord embed."
    },

    "Complex Discord bot embed": {
		"prefix": "djs.embed+",
		"body": [       
            "const embed = new Discord.EmbedBuilder()",
            "\t.setColor('${1:#0099ff}')",
            "\t.setTitle('${2:title}')",
            "\t.setURL('${3:https://discord.js.org/}')",
            "\t.setAuthor({ name:'${4:name}', iconURL:'${5:https://i.imgur.com/wSTFkRM.png}', '${6:https://discord.js.org}'})",
            "\t.setDescription('${7:description}')",
            "\t.setThumbnail('${8:https://i.imgur.com/wSTFkRM.png}')",
            "\t.addFields(",
            "\t\t{ name: '${9:title}', value: '${10:value}', inline: ${11:false} },",
            "\t)",
            "\t.setImage('${12:https://i.imgur.com/wSTFkRM.png}')",
            "\t.setTimestamp('${13:timestamp}')",
            "\t.setFooter({ text: '${14:footer}', iconURL: '${15:https://i.imgur.com/wSTFkRM.png}'});",
            "",
            "\tchannel.send({ embeds: [embed] });"
		],
        "description": "Create a complex Discord embed."
    },

    "Default Discord bot message": {
		"prefix": "djs.message",
		"body": [       
            "${1:client}.on(Discord.Events.MessageCreate, message => {",
            "\tif (!message.content.startsWith(config.prefix) || message.author.bot) return;",
            "",
            "\tconst args = message.content.slice(config.prefix.length).split(/ +/);",
            "\tconst commandName = args.shift().toLowerCase();",
            "",
            "\tconst command = client.commands.get(commandName) || client.commands.find(cmd => cmd.aliases && cmd.aliases.includes(commandName));",
            "",
            "\t// If command exist",
            "\tif (!command) return;",
            "",
            "\t// Check if command can be executed in DM",
            "\tif (command.guildOnly && message.channel.type !== 'text') {",
            "\t\treturn message.reply('I can\\'t execute that command inside DMs!');",
            "\t}",
            "",
            "\t// Check if args are required",
            "\tif (command.args && !args.length) {",
            "\t\tlet reply = `You didn't provide any arguments, ${message.author}!`;",
            "",
            "\t\tif (command.usage) {",
            "\t\t\treply += `\\nThe proper usage would be: \\`${config.prefix}${command.name} ${command.usage}\\``;",
            "\t\t}",
            "",
            "\t\treturn message.channel.send(reply);",
            "\t}",
            "",
            "\t// Check if user is in cooldown",
            "\tif (!cooldowns.has(command.name)) {",
            "\t\tcooldowns.set(command.name, new Discord.Collection());",
            "\t}",
            "",
            "\tconst now = Date.now();",
            "\tconst timestamps = cooldowns.get(command.name);",
            "\tconst cooldownAmount = (command.cooldown || 3) * 1000;",
            "",
            "\tif (timestamps.has(message.author.id)) {",
            "\t\tconst expirationTime = timestamps.get(message.author.id) + cooldownAmount;",
            "",
            "\t\tif (now < expirationTime) {",
            "\t\t\t// If user is in cooldown",
            "\t\t\tconst timeLeft = (expirationTime - now) / 1000;",
            "\t\t\treturn message.reply(`please wait ${timeLeft.toFixed(1)} more second(s) before reusing the \\`${command.name}\\` command.`);",
            "\t\t}",
            "\t} else {",
            "\t\ttimestamps.set(message.author.id, now);",
            "\t\tsetTimeout(() => timestamps.delete(message.author.id), cooldownAmount);",
            "\t\t// Execute command",
            "\t\ttry {",
            "\t\t\tcommand.execute(message, args);",
            "\t\t} catch (error) {",
            "\t\t\tconsole.error(error);",
            "\t\t\tmessage.reply('there was an error trying to execute that command!');",
            "\t\t}",
            "\t}",
            "});"
		],
        "description": "Create a default Discord bot message."
    },

    "Default Discord bot channelCreate": {
		"prefix": "djs.channelCreate",
		"body": [       
            "${1:client}.on(Discord.Events.ChannelCreate, (channel) => {",
            "\t${2:console.log(channel);}",
            "});"
		],
        "description": "Create a default Discord bot channelCreate."
    },

    "Default Discord bot channelDelete": {
		"prefix": "djs.channelDelete",
		"body": [       
            "${1:client}.on(Discord.Events.ChannelDelete, (channel) => {",
            "\t${2:console.log(channel);}",
            "});"
		],
        "description": "Create a default Discord bot channelDelete."
    },

    "Default Discord bot channelPinsUpdate": {
		"prefix": "djs.channelPinsUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.ChannelPinsUpdate, (channel, time) => {",
            "\t${2:console.log(channel, time);}",
            "});"
		],
        "description": "Create a default Discord bot channelPinsUpdate."
    },

    "Default Discord bot channelUpdate": {
		"prefix": "djs.channelUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.ChannelUpdate, (oldChannel, newChannel) => {",
            "\t${2:console.log(oldChannel, newChannel);}",
            "});"
		],
        "description": "Create a default Discord bot channelUpdate."
    },

    "Default Discord bot applicationCommandPermissionsUpdate": {
        "prefix": "djs.applicationCommandPermissionsUpdate",
        "body": [
            "${1:client}.on(Discord.Events.ApplicationCommandPermissionsUpdate, (request) => {",
            "\t${2:console.log(request)}",
            "});"
        ],
        "description",: "Create a default Discord bot applicationCommandPermissionsUpdate"
    },

    "Default Discord bot debug": {
		"prefix": "djs.debug",
		"body": [       
            "${1:client}.on('Discord.Events.Debug, (info) => {",
            "\t${2:console.log(info);}",
            "});"
		],
        "description": "Create a default Discord bot debug."
    },

    "Default Discord bot emojiCreate": {
		"prefix": "djs.emojiCreate",
		"body": [       
            "${1:client}.on(Discord.Events.GuildEmojiCreate', (emoji) => {",
            "\t${2:console.log(emoji);}",
            "});"
		],
        "description": "Create a default Discord bot emojiCreate."
    },

    "Default Discord bot emojiDelete": {
		"prefix": "djs.emojiDelete",
		"body": [       
            "${1:client}.on(Discord.Events.GuildEmojiDelete, (emoji) => {",
            "\t${2:console.log(emoji);}",
            "});"
		],
        "description": "Create a default Discord bot emojiDelete."
    },

    "Default Discord bot emojiUpdate": {
		"prefix": "djs.emojiUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.GuildEmojiUpdate, (oldEmoji, newEmoji) => {",
            "\t${2:console.log(oldEmoji, newEmoji);}",
            "});"
		],
        "description": "Create a default Discord bot emojiUpdate."
    },

    "Default Discord bot error": {
		"prefix": "djs.error",
		"body": [       
            "${1:client}.on(Discord.Events.Error, (error) => {",
            "\t${2:console.log(error);}",
            "});"
		],
        "description": "Create a default Discord bot error."
    },

    "Default Discord bot guildBanAdd": {
		"prefix": "djs.guildBanAdd",
		"body": [       
            "${1:client}.on(Discord.Events.GuildBanAdd, (guild, user) => {",
            "\t${2:console.log(guild, user);}",
            "});"
		],
        "description": "Create a default Discord bot guildBanAdd."
    },

    "Default Discord bot guildBanRemove": {
		"prefix": "djs.guildBanRemove",
		"body": [       
            "${1:client}.on(Discord.Events.GuildBanRemove, (guild, user) => {",
            "\t${2:console.log(guild, user);}",
            "});"
		],
        "description": "Create a default Discord bot guildBanRemove."
    },

    "Default Discord bot guildCreate": {
		"prefix": "djs.guildCreate",
		"body": [       
            "${1:client}.on(Discord.Events.GuildCreate, (guild) => {",
            "\t${2:console.log(guild);}",
            "});"
		],
        "description": "Create a default Discord bot guildCreate."
    },

    "Default Discord bot guildDelete": {
		"prefix": "djs.guildDelete",
		"body": [       
            "${1:client}.on(Discord.Events.GuildDelete', (guild) => {",
            "\t${2:console.log(guild);}",
            "});"
		],
        "description": "Create a default Discord bot guildDelete."
    },

    "Default Discord bot guildIntegrationsUpdate": {
		"prefix": "djs.guildIntegrationsUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.GuildIntegrationsUpdate, (guild) => {",
            "\t${2:console.log(guild);}",
            "});"
		],
        "description": "Create a default Discord bot guildIntegrationsUpdate."
    },

    "Default Discord bot guildMemberAdd": {
		"prefix": "djs.guildMemberAdd",
		"body": [       
            "${1:client}.on(Discord.Events.GuildMemberAdd, (member) => {",
            "\t${2:console.log(member);}",
            "});"
		],
        "description": "Create a default Discord bot guildMemberAdd."
    },

    "Default Discord bot guildMemberRemove": {
		"prefix": "djs.guildMemberRemove",
		"body": [       
            "${1:client}.on(Discord.Events.GuildMemberRemove, (member) => {",
            "\t${2:console.log(member);}",
            "});"
		],
        "description": "Create a default Discord bot guildMemberRemove."
    },

    "Default Discord bot guildMemberAvailable": {
		"prefix": "djs.guildMemberAvailable",
		"body": [       
            "${1:client}.on(Discord.Events.GuildMemberAvailable, (member) => {",
            "\t${2:console.log(member);}",
            "});"
		],
        "description": "Create a default Discord bot guildMemberAvailable."
    },

    "Default Discord bot guildMemberUpdate": {
		"prefix": "djs.guildMemberUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.GuildMemberUpdate, (oldMember, newMember) => {",
            "\t${2:console.log(oldMember, newMember);}",
            "});"
		],
        "description": "Create a default Discord bot guildMemberUpdate."
    },

    "Default Discord bot guildMembersChunk": {
		"prefix": "djs.guildMembersChunk",
		"body": [       
            "${1:client}.on(Discord.Events.GuildMembersChunk, (members, guild) => {",
            "\t${2:console.log(members, guild);}",
            "});"
		],
        "description": "Create a default Discord bot guildMembersChunk."
    },

    "Default Discord bot guildUnavailable": {
		"prefix": "djs.guildUnavailable",
		"body": [       
            "${1:client}.on(Discord.Events.GuildUnavailable, (guild) => {",
            "\t${2:console.log(guild);}",
            "});"
		],
        "description": "Create a default Discord bot guildUnavailable."
    },

    "Default Discord bot guildUpdate": {
		"prefix": "djs.guildUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.GuildUpdate, (oldGuild, newGuild) => {",
            "\t${2:console.log(oldGuild, newGuild);}",
            "});"
		],
        "description": "Create a default Discord bot guildUpdate."
    },

    "Default Discord bot messageDelete": {
		"prefix": "djs.messageDelete",
		"body": [       
            "${1:client}.on(Discord.Events.MessageDelete, (message) => {",
            "\t${2:console.log(message);}",
            "});"
		],
        "description": "Create a default Discord bot messageDelete."
    },

    "Default Discord bot messageDeleteBulk": {
		"prefix": "djs.messageDeleteBulk",
		"body": [       
            "${1:client}.on(Discord.Events.MessageDeleteBulk, (messages) => {",
            "\t${2:console.log(messages);}",
            "});"
		],
        "description": "Create a default Discord bot messageDeleteBulk."
    },

    "Default Discord bot messageReactionAdd": {
		"prefix": "djs.messageReactionAdd",
		"body": [       
            "${1:client}.on(Discord.Events.MessageReactionAdd, (messageReaction, user) => {",
            "\t${2:console.log(messageReaction, user);}",
            "});"
		],
        "description": "Create a default Discord bot messageReactionAdd."
    },

    "Default Discord bot messageReactionRemove": {
		"prefix": "djs.messageReactionRemove",
		"body": [       
            "${1:client}.on(Discord.Events.MessageReactionRemove, (messageReaction, user) => {",
            "\t${2:console.log(messageReaction, user);}",
            "});"
		],
        "description": "Create a default Discord bot messageReactionRemove."
    },

    "Default Discord bot messageUpdate": {
		"prefix": "djs.messageUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.MessageUpdate, (oldMessage, newMessage) => {",
            "\t${2:console.log(oldMessage, newMessage);}",
            "});"
		],
        "description": "Create a default Discord bot messageUpdate."
    },

    "Default Discord bot presenceUpdate": {
		"prefix": "djs.presenceUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.PresenceUpdate, (oldMember, newMember) => {",
            "\t${2:console.log(oldMember, newMember);}",
            "});"
		],
        "description": "Create a default Discord bot presenceUpdate."
    },

    "Default Discord bot rateLimit": {
		"prefix": "djs.rateLimit",
		"body": [       
            "${1:client}.on('rateLimit', (rateLimitInfo, rateLimitInfo.limit, rateLimitInfo.timeDifference, rateLimitInfo.path, rateLimitInfo.method) => {",
            "\t${2:console.log(rateLimitInfo, rateLimitInfo.limit, rateLimitInfo.timeDifference, rateLimitInfo.path, rateLimitInfo.method);}",
            "});"
		],
        "description": "Create a default Discord bot rateLimit."
    },

    "Default Discord bot ready": {
		"prefix": "djs.ready",
		"body": [       
            "${1:client}.on(Discord.Events.ClientReady, (client) => {",
            "\t${2:console.log(client.user.username);}",
            "});"
		],
        "description": "Create a default Discord bot ready."
    },

    "Default Discord bot reconnecting": {
		"prefix": "djs.reconnecting",
		"body": [       
            "${1:client}.on(Discord.Events.ShardReconnecting, (id) => {",
            "\t${2:console.log(id);}",
            "});"
		],
        "description": "Create a default Discord bot\'s shard reconnecting."
    },

    "Default Discord bot resume": {
		"prefix": "djs.resume",
		"body": [       
            "${1:client}.on(Discord.Events.shardResume, (id, replayedEvents) => {",
            "\t${2:console.log(id, replayedEvents);}",
            "});"
		],
        "description": "Create a default Discord bot resume."
    },

    "Default Discord bot roleCreate": {
		"prefix": "djs.roleCreate",
		"body": [       
            "${1:client}.on(Discord.Events.RoleCreate, (role) => {",
            "\t${2:console.log(role);}",
            "});"
		],
        "description": "Create a default Discord bot roleCreate."
    },

    "Default Discord bot roleDelete": {
		"prefix": "djs.roleDelete",
		"body": [       
            "${1:client}.on(Discord.Events.RoleDelete, (role) => {",
            "\t${2:console.log(role);}",
            "});"
		],
        "description": "Create a default Discord bot roleDelete."
    },

    "Default Discord bot roleUpdate": {
		"prefix": "djs.roleUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.RoleUpdate, (oldRole, newRole) => {",
            "\t${2:console.log(oldRole, newRole);}",
            "});"
		],
        "description": "Create a default Discord bot roleUpdate."
    },

    "Default Discord bot typingStart": {
		"prefix": "djs.typingStart",
		"body": [       
            "${1:client}.on(Discord.Events.TypingStart, (channel, user) => {",
            "\t${2:console.log(channel, user);}",
            "});"
		],
        "description": "Create a default Discord bot typingStart."
    },

    "Default Discord bot userUpdate": {
		"prefix": "djs.userUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.UserUpdate, (oldUser, newUser) => {",
            "\t${2:console.log(oldUser, newUser);}",
            "});"
		],
        "description": "Create a default Discord bot userUpdate."
    },

    "Default Discord bot voiceStateUpdate": {
		"prefix": "djs.voiceStateUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.VoiceStateUpdate, (oldMember, newMember) => {",
            "\t${2:console.log(oldMember, newMember);}",
            "});"
		],
        "description": "Create a default Discord bot voiceStateUpdate."
    },

    "Default Discord bot warn": {
		"prefix": "djs.warn",
		"body": [       
            "${1:client}.on(Discord.Events.Warn, (info) => {",
            "\t${2:console.log(info);}",
            "});"
		],
        "description": "Create a default Discord bot warn."
    },

    "Default Discord bot webhookUpdate": {
		"prefix": "djs.webhooksUpdate",
		"body": [       
            "${1:client}.on(Discord.Events.WebhooksUpdate, (channel) => {",
            "\t${2:console.log(channel);}",
            "});"
		],
        "description": "Create a default Discord bot webhookUpdate."
    },

    "Default Discord bot AutoModerationActionExecution": {
        "prefix": "djs.autoModerationActionExecution",
        "body": [
            "${1:client}.on(Discord.Events.AutoModerationActionExecution, (data) => {",
            "\t${2:console.log(data);}",
            "});"
        ],
        "description": "Create a default Discord bot AutoModerationActionExecution."
    },
}
